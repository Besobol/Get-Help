// <auto-generated />
using System;
using Get_Help.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Get_Help.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240425153358_SeedDb")]
    partial class SeedDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Get_Help.Infrastructure.Data.Models.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Get_Help.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Get_Help.Infrastructure.Data.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Message Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgentId")
                        .HasColumnType("int")
                        .HasComment("Agent Identifier");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasComment("Client Identifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)")
                        .HasComment("Message Content");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("datetime2")
                        .HasComment("Time of sending the message");

                    b.Property<int>("TicketId")
                        .HasColumnType("int")
                        .HasComment("Ticket Identifier");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("ClientId");

                    b.HasIndex("TicketId");

                    b.ToTable("Messages", t =>
                        {
                            t.HasComment("Ticket Message");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 3,
                            Content = "I need advice about my question",
                            SentTime = new DateTime(2024, 4, 25, 18, 33, 58, 227, DateTimeKind.Local).AddTicks(6729),
                            TicketId = 1
                        },
                        new
                        {
                            Id = 2,
                            AgentId = 2,
                            Content = "Answer",
                            SentTime = new DateTime(2024, 4, 25, 18, 33, 58, 227, DateTimeKind.Local).AddTicks(6730),
                            TicketId = 1
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 3,
                            Content = "Question",
                            SentTime = new DateTime(2024, 4, 25, 18, 33, 58, 227, DateTimeKind.Local).AddTicks(6732),
                            TicketId = 1
                        },
                        new
                        {
                            Id = 4,
                            AgentId = 2,
                            Content = "Confusion?",
                            SentTime = new DateTime(2024, 4, 25, 18, 33, 58, 227, DateTimeKind.Local).AddTicks(6734),
                            TicketId = 1
                        },
                        new
                        {
                            Id = 5,
                            ClientId = 3,
                            Content = "Paragraph of explanation: The morning sun gently kissed the dewy grass as birds chirped melodies of a new day. Amidst the tranquility, whispers of adventure beckoned, enticing souls to explore the unknown. With each step, the world unfolded, revealing secrets waiting to be discovered.\r\nThe world hummed with the rhythm of life, where each heartbeat echoed a tale untold. Beneath the azure sky, dreams danced like leaves in the wind, weaving stories of hope and resilience. In the symphony of existence, every moment held the promise of infinite possibilities, waiting to be embraced.",
                            SentTime = new DateTime(2024, 4, 25, 18, 33, 58, 227, DateTimeKind.Local).AddTicks(6735),
                            TicketId = 1
                        });
                });

            modelBuilder.Entity("Get_Help.Infrastructure.Data.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Service Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Service title Image Url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Service Name");

                    b.HasKey("Id");

                    b.ToTable("Services", t =>
                        {
                            t.HasComment("Service");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImgUrl = "https://nepirockcastle.com/wp-content/uploads/2019/03/Technopolis-bg-logo.png",
                            Name = "Technopolis"
                        },
                        new
                        {
                            Id = 2,
                            ImgUrl = "https://th.bing.com/th/id/OIP.kxBLq5pbWza-QlJHrOyz6QHaDt?rs=1&pid=ImgDetMain",
                            Name = "Technomarket"
                        },
                        new
                        {
                            Id = 3,
                            ImgUrl = "Images/ServiceImages/Amazon.jpg",
                            Name = "Amazon"
                        },
                        new
                        {
                            Id = 4,
                            ImgUrl = "Images/ServiceImages/eBay.png",
                            Name = "eBay"
                        });
                });

            modelBuilder.Entity("Get_Help.Infrastructure.Data.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Ticket Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgentId")
                        .HasColumnType("int")
                        .HasComment("Agent Identifier");

                    b.Property<int?>("ClientId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasComment("Client Identifier");

                    b.Property<DateTime?>("TimeClosed")
                        .HasColumnType("datetime2")
                        .HasComment("Time of closing the Ticket");

                    b.Property<DateTime>("TimeOpened")
                        .HasColumnType("datetime2")
                        .HasComment("Time of opening the Ticket");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int")
                        .HasComment("Topic Identifier");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("ClientId");

                    b.HasIndex("TopicId");

                    b.ToTable("Tickets", t =>
                        {
                            t.HasComment("Ticket");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 20, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4192),
                            Title = "What are good PC parts at the moment",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 1, 16, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4200),
                            Title = "How to find a good fridge",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 5, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4201),
                            Title = "Can i use this microwave as an oven",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 4,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 10, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4203),
                            Title = "What are good deals at the moment",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 5,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 10, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4205),
                            Title = "What are good deals at the moment",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 6,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 10, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4206),
                            Title = "What are good deals at the moment",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 7,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 10, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4208),
                            Title = "What are good deals at the moment",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 8,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 10, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4209),
                            Title = "What are good deals at the moment",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 9,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 10, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4211),
                            Title = "What are good deals at the moment",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 10,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 10, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4213),
                            Title = "What are good deals at the moment",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 11,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 10, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4215),
                            Title = "What are good deals at the moment",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 12,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 10, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4216),
                            Title = "What are good deals at the moment",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 13,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 10, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4218),
                            Title = "What are good deals at the moment",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 14,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 10, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4219),
                            Title = "What are good deals at the moment",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 15,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 10, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4221),
                            Title = "What are good deals at the moment",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 16,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 10, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4222),
                            Title = "What are good deals at the moment",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 17,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 10, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4224),
                            Title = "What are good deals at the moment",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 18,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 10, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4225),
                            Title = "What are good deals at the moment",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 19,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 10, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4227),
                            Title = "What are good deals at the moment",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 20,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 10, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4228),
                            Title = "What are good deals at the moment",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 21,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 10, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4230),
                            Title = "What are good deals at the moment",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 22,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 10, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4231),
                            Title = "What are good deals at the moment",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 23,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 10, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4233),
                            Title = "What are good deals at the moment",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 24,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 10, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4234),
                            Title = "What are good deals at the moment",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 25,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 10, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4236),
                            Title = "What are good deals at the moment",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 26,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 10, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4292),
                            Title = "What are good deals at the moment",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 27,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 10, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4294),
                            Title = "What are good deals at the moment",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 28,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 10, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4296),
                            Title = "What are good deals at the moment",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 29,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 10, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4298),
                            Title = "What are good deals at the moment",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 30,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 10, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4300),
                            Title = "What are good deals at the moment",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 31,
                            ClientId = 3,
                            TimeOpened = new DateTime(2024, 4, 10, 18, 33, 58, 110, DateTimeKind.Local).AddTicks(4301),
                            Title = "What are good deals at the moment",
                            TopicId = 4
                        });
                });

            modelBuilder.Entity("Get_Help.Infrastructure.Data.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Topic Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Topic Title");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasComment("Service Identifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Topics", t =>
                        {
                            t.HasComment("Service Topic");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "How to cancel my purchase?",
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Account problems",
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Payment plans",
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Technical advice",
                            ServiceId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Get_Help.Infrastructure.Data.Models.AgentRole", b =>
                {
                    b.HasBaseType("Get_Help.Infrastructure.Data.Models.ApplicationRole");

                    b.HasDiscriminator().HasValue("AgentRole");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Agent",
                            NormalizedName = "AGENT"
                        });
                });

            modelBuilder.Entity("Get_Help.Infrastructure.Data.Models.ClientRole", b =>
                {
                    b.HasBaseType("Get_Help.Infrastructure.Data.Models.ApplicationRole");

                    b.HasDiscriminator().HasValue("ClientRole");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Get_Help.Infrastructure.Data.Models.Agent", b =>
                {
                    b.HasBaseType("Get_Help.Infrastructure.Data.Models.ApplicationUser");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Agent Name");

                    b.HasDiscriminator().HasValue("Agent");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "090bd9a0-b898-4020-936a-ee23c6bb6a09",
                            Email = "Smith@agent.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SMITH@AGENT.COM",
                            NormalizedUserName = "SMITH@AGENT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKFVSsEJa9vA6nWTHbdGfTE1YlfvBh7WhByGcY31C6lC/YAUmorO4PAjSt+imytx2Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f8a039b4-97d4-48c6-8c3b-14fad8a3f142",
                            TwoFactorEnabled = false,
                            UserName = "Smith@agent.com",
                            Name = "Agent Smith"
                        });
                });

            modelBuilder.Entity("Get_Help.Infrastructure.Data.Models.Client", b =>
                {
                    b.HasBaseType("Get_Help.Infrastructure.Data.Models.ApplicationUser");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "03e98d4c-e097-4934-8438-1f4270ac8a12",
                            Email = "JDoe@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JDOE@USER.COM",
                            NormalizedUserName = "JDOE",
                            PasswordHash = "AQAAAAIAAYagAAAAEGu0sSs6hC/LRn7+iUMRN8Gj8QCNL/oqJVqiL13dsoeR5v4EFLFAlO0DR+qBAgEKXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "99187c04-e717-4f2e-b890-6bf5ffc59057",
                            TwoFactorEnabled = false,
                            UserName = "JDoe"
                        });
                });

            modelBuilder.Entity("Get_Help.Infrastructure.Data.Models.Message", b =>
                {
                    b.HasOne("Get_Help.Infrastructure.Data.Models.Agent", "Agent")
                        .WithMany("Messages")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Get_Help.Infrastructure.Data.Models.Client", "Client")
                        .WithMany("Messages")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Get_Help.Infrastructure.Data.Models.Ticket", "Ticket")
                        .WithMany("Messages")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Client");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Get_Help.Infrastructure.Data.Models.Ticket", b =>
                {
                    b.HasOne("Get_Help.Infrastructure.Data.Models.Agent", "Agent")
                        .WithMany("Tickets")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Get_Help.Infrastructure.Data.Models.Client", "Client")
                        .WithMany("Tickets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Get_Help.Infrastructure.Data.Models.Topic", "Topic")
                        .WithMany("Tickets")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Client");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Get_Help.Infrastructure.Data.Models.Topic", b =>
                {
                    b.HasOne("Get_Help.Infrastructure.Data.Models.Service", "Service")
                        .WithMany("Topics")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Get_Help.Infrastructure.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Get_Help.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Get_Help.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Get_Help.Infrastructure.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Get_Help.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Get_Help.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Get_Help.Infrastructure.Data.Models.Service", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("Get_Help.Infrastructure.Data.Models.Ticket", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Get_Help.Infrastructure.Data.Models.Topic", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Get_Help.Infrastructure.Data.Models.Agent", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Get_Help.Infrastructure.Data.Models.Client", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
